{
  "_from": "node-fetch-polyfill",
  "_id": "node-fetch-polyfill@2.0.6",
  "_inBundle": false,
  "_integrity": "sha1-BzzjrWgmvbmVqHKM/E44I/IEQHo=",
  "_location": "/node-fetch-polyfill",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-fetch-polyfill",
    "fetchSpec": "latest",
    "name": "node-fetch-polyfill",
    "raw": "node-fetch-polyfill",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-fetch-polyfill/-/node-fetch-polyfill-2.0.6.tgz",
  "_shasum": "073ce3ad6826bdb995a8728cfc4e3823f204407a",
  "_shrinkwrap": null,
  "_spec": "node-fetch-polyfill",
  "_where": "/home/alex/projects/pdi-svg-generator",
  "author": {
    "name": "David Frank"
  },
  "bugs": {
    "url": "https://github.com/gwicke/node-fetch-polyfill/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Gabriel Wicke",
      "email": "gwicke@wikimedia.org"
    }
  ],
  "dependencies": {
    "encoding": "^0.1.11",
    "is-stream": "^1.0.1",
    "node-web-streams": "^0.2.1"
  },
  "deprecated": false,
  "description": "A light-weight module that brings window.fetch to node.js",
  "devDependencies": {
    "bluebird": "^3.3.4",
    "chai": "^3.5.0",
    "chai-as-promised": "^5.2.0",
    "coveralls": "^2.11.2",
    "form-data": "^1.0.0-rc1",
    "istanbul": "^0.4.2",
    "mocha": "^2.1.0",
    "parted": "^0.1.1",
    "promise": "^7.1.1",
    "resumer": "0.0.0"
  },
  "homepage": "https://github.com/gwicke/node-fetch-polyfill",
  "keywords": [
    "fetch",
    "http",
    "promise"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-fetch-polyfill",
  "optionalDependencies": {},
  "readme": "\nnode-fetch\n==========\n\n[![npm version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage status][coveralls-image]][coveralls-url]\n\nA light-weight module that brings `window.fetch` to Node.js\n\n\n# Motivation\n\nI really like the notion of Matt Andrews'\n[isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch): it\nbridges the API gap between client-side and server-side http requests, so\ndevelopers have less to worry about.\n\nInstead of implementing `XMLHttpRequest` in node to run browser-specific\n[fetch polyfill](https://github.com/github/fetch), why not go from node's\n`http` to `fetch` API directly? Node has native stream support, browserify\nbuild targets (browsers) don't, so underneath they are going to be vastly\ndifferent anyway.\n\nHence `node-fetch`, minimal code for a `window.fetch` compatible API on\nNode.js runtime.\n\n\n# Features\n\n- Stay consistent with `window.fetch` API.\n- Make conscious trade-off when following [whatwg fetch spec](https://fetch.spec.whatwg.org/) and [stream spec](https://streams.spec.whatwg.org/) implementation details, document known difference.\n- Use native promise, but allow substituting it with [insert your favorite\n- promise library].\n- Use WhatWG `ReadableStream` for streaming bodies, on both request and response.\n- Useful extensions such as timeout, redirect limit, response size limit, explicit reject errors.\n\n\n# Difference from client-side fetch\n\n- See [Known Differences](https://github.com/gwicke/node-fetch-polyfill/blob/master/LIMITS.md) for details.\n- If you happen to use a missing feature that `window.fetch` offers, feel free to open an issue.\n- Pull requests are welcomed too!\n\n\n# Install\n\n`npm install node-fetch-polyfill --save`\n\n\n# Usage\n\n```javascript\nvar fetch = require('node-fetch-polyfill');\n\n// If you are not on node v0.12, set a Promise library first, eg.\n// fetch.Promise = require('bluebird');\n\n// plain text or html\n\nfetch('https://github.com/')\n\t.then(function(res) {\n\t\treturn res.text();\n\t}).then(function(body) {\n\t\tconsole.log(body);\n\t});\n\n// json\n\nfetch('https://api.github.com/users/github')\n\t.then(function(res) {\n\t\treturn res.json();\n\t}).then(function(json) {\n\t\tconsole.log(json);\n\t});\n\n// meta\n\nfetch('https://github.com/')\n\t.then(function(res) {\n\t\tconsole.log(res.ok);\n\t\tconsole.log(res.status);\n\t\tconsole.log(res.statusText);\n\t\tconsole.log(res.headers.raw());\n\t\tconsole.log(res.headers.get('content-type'));\n\t});\n\n// post\n\nfetch('http://httpbin.org/post', { method: 'POST', body: 'a=1' })\n\t.then(function(res) {\n\t\treturn res.json();\n\t}).then(function(json) {\n\t\tconsole.log(json);\n\t});\n\n// post with stream from resumer\n\nvar resumer = require('resumer');\nvar stream = resumer().queue('a=1').end();\nfetch('http://httpbin.org/post', { method: 'POST', body: stream })\n\t.then(function(res) {\n\t\treturn res.json();\n\t}).then(function(json) {\n\t\tconsole.log(json);\n\t});\n\n// post with form-data (detect multipart)\n\nvar FormData = require('form-data');\nvar form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form })\n\t.then(function(res) {\n\t\treturn res.json();\n\t}).then(function(json) {\n\t\tconsole.log(json);\n\t});\n\n// post with form-data (custom headers)\n\nvar FormData = require('form-data');\nvar form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form, headers: form.getHeaders() })\n\t.then(function(res) {\n\t\treturn res.json();\n\t}).then(function(json) {\n\t\tconsole.log(json);\n\t});\n\n// node 0.11+, yield with co\n\nvar co = require('co');\nco(function *() {\n\tvar res = yield fetch('https://api.github.com/users/github');\n\tvar json = yield res.json();\n\tconsole.log(res);\n});\n```\n\nSee [test cases](https://github.com/gwicke/node-fetch-polyfill/blob/master/test/test.js) for more examples.\n\n\n# API\n\n## fetch(url, options)\n\nReturns a `Promise`\n\n### Url\n\nShould be an absolute url, eg `http://example.com/`\n\n### Options\n\ndefault values are shown, note that only `method`, `headers`, `redirect` and `body` are allowed in `window.fetch`, others are node.js extensions.\n\n```\n{\n\tmethod: 'GET'\n\t, headers: {}        // request header. format {a:'1'} or {b:['1','2','3']}\n\t, redirect: 'follow' // set to 'manual' to extract redirect headers, `error` to reject redirect\n\t, follow: 20         // maximum redirect count. 0 to not follow redirect\n\t, timeout: 0         // req/res timeout in ms. 0 to disable (os limit still applies), timeout reset on redirect\n\t, compress: true     // support gzip/deflate content encoding. false to disable\n\t, size: 0            // maximum response body size in bytes. 0 to disable\n\t, body: empty        // request body. can be a string, buffer, readable stream\n\t, agent: null        // http.Agent instance, allows custom proxy, certificate etc.\n}\n```\n\n\n# License\n\nMIT\n\n\n# Acknowledgement\n\nThanks to [github/fetch](https://github.com/github/fetch) for providing a solid implementation reference.\n\n\n[npm-image]: https://img.shields.io/npm/v/node-fetch-polyfill.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/node-fetch-polyfill\n[travis-image]: https://img.shields.io/travis/gwicke/node-fetch-polyfill.svg?style=flat-square\n[travis-url]: https://travis-ci.org/gwicke/node-fetch-polyfill\n[coveralls-image]: https://img.shields.io/coveralls/gwicke/node-fetch-polyfill.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/gwicke/node-fetch-polyfill\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gwicke/node-fetch-polyfill.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha --report lcovonly -- -R spec test/test.js && (cat ./coverage/lcov.info | coveralls || exit 0)",
    "report": "istanbul cover _mocha -- -R spec test/test.js",
    "test": "mocha test/test.js"
  },
  "version": "2.0.6"
}
